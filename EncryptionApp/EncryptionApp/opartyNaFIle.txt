using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Essentials;
using Xamarin.Forms;

namespace EncryptionApp
{
    public partial class MainPage : ContentPage
    {
        private string _fileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "EncApp");
        AES aes = new AES();
        public MainPage()
        {
            InitializeComponent();
        }
        //temp 1234567890123456
        private string KeyInput;
        private string IV = "żź05sy!y3Sa9HH*@";
        private bool IsKeyCorrect = false;

        private void btnAcceptKey_Clicked(object sender, EventArgs e)
        {
            if ((entKey.Text == string.Empty || entKey.Text.Length < 16 && entKey.Text.Length > 16) ||
                (entKey.Text == string.Empty || entKey.Text.Length < 32 && entKey.Text.Length > 32))
            {
                DisplayAlert("Klucz", "Klucz musi zawierać 16 lub 32 znaków", "OK");
            }
            else
            {
                KeyInput = entKey.Text;
                IsKeyCorrect = true;
            }
        }
        private void btnClearKey_Clicked(object sender, EventArgs e) 
        {
            entKey.Text = String.Empty;
        }

        private void btnEncrypt_Clicked(object sender, EventArgs e)
        {
            if (IsKeyCorrect && edtUserInput.Text != string.Empty)
            {
                //byte[] Sprunk = File.ReadAllBytes(_fileName);
                byte[] bKey = Encoding.ASCII.GetBytes(KeyInput);
                byte[] bIV = Encoding.ASCII.GetBytes(IV);
                byte[] bEncrypt = aes.Encryption(edtUserInput.Text, bKey, bIV);
                File.WriteAllBytes(_fileName, bEncrypt);
                edtUserInput.Text = File.ReadAllText(_fileName);
                
            }
            else
            {
                DisplayAlert("Info", "Podaj klucz oraz tekst", "OK");
            }
            
        }
        private void btnDecrypt_Clicked(object sender, EventArgs e)
        {
            if (IsKeyCorrect && edtUserInput.Text != string.Empty)
            {
            byte[] bKey = Encoding.ASCII.GetBytes(KeyInput);
            byte[] bIV = Encoding.ASCII.GetBytes(IV);
            byte[] encryptedText = File.ReadAllBytes(_fileName);
            edtUserInput.Text = aes.Decription(encryptedText, bKey, bIV);
            }
            else
            {
                DisplayAlert("Info", "Podaj klucz oraz tekst", "OK");
            }
        }
        private async void btnCopy_Clicked(object sender, EventArgs e)
        {
            await Clipboard.SetTextAsync(edtUserInput.Text);
        }
        private async void btnPaste_Clicked(object sender, EventArgs e)
        {
            edtUserInput.Text = await Clipboard.GetTextAsync();
        }
        private void btnClear_Clicked(object sender, EventArgs e)
        {
            edtUserInput.Text = String.Empty;
        }
        private void btnHelp_Clicked(object sender, EventArgs e)
        {
            DisplayAlert("Pomoc", "Treść pomocy", "OK");
        }
        private void btnExit_Clicked(object sender, EventArgs e)
        {
            System.Diagnostics.Process.GetCurrentProcess().Kill();
        }
        
    }
}
